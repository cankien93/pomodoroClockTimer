{"version":3,"sources":["Little-Girl-Laughing-A1.mp3","components/settingContainer/settingContainer.jsx","components/Timer/Timer.jsx","components/TimerController/TimerController.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","SettingContainer","props","className","id","onClick","BreakIncrease","breakTime","BreakDecrease","SessionIncrease","sessionTime","SessionDecrease","Timer","min","minLeft","sec","secLeft","timerLabel","TimerController","start","reset","isRunning","stop","App","IncreaseSetBreak","setState","setBreak","state","DecreaseSetBreak","IncreaseSetSession","setSession","DecreaseSetSession","startTimer","setInterval","tickTimer","console","log","timerBreak","timerSession","clearInterval","this","src","sound","autoPlay","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,qD,iOC6B5BC,G,MA1BS,SAAC,GAAc,IAAVC,EAAS,oBAClC,OACE,yBAAKC,UAAU,oBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,QAAQC,GAAG,eAA1B,gBACA,6BAEE,4BAAQD,UAAU,SAASC,GAAG,kBAAkBC,QAAS,WAAKH,EAAMI,kBAApE,UACA,0BAAMF,GAAG,gBAAgBF,EAAMK,WAE/B,4BAAQJ,UAAU,SAASC,GAAG,kBAAkBC,QAAS,WAAKH,EAAMM,kBAApE,YAGJ,yBAAKL,UAAU,WACb,yBAAKA,UAAU,QAAQC,GAAG,iBAA1B,kBACA,6BACE,4BAAQD,UAAU,SAASC,GAAG,oBAAoBC,QAAS,WAAKH,EAAMO,oBAAtE,UACA,0BAAML,GAAG,kBAAkBF,EAAMQ,aACjC,4BAAQP,UAAU,SAASC,GAAG,oBAAoBC,QAAS,WAAKH,EAAMS,oBAAtE,eCJGC,EAfD,SAAC,GAAc,IAAVV,EAAS,oBAClBW,EAAMX,EAAMY,QACZC,EAAMb,EAAMc,QACZC,EAAaf,EAAMe,WACzB,OACI,6BACI,yBAAKb,GAAG,eAAea,EAAW,UAAU,SAC5C,yBAAKb,GAAG,aACHS,GAAK,GAAKA,EAAV,WAAoBA,GACrB,mCACCE,GAAK,GAAIA,EAAT,WAAmBA,MCHrBG,EAPS,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,UAAWC,EAA3B,EAA2BA,KAA3B,OACpB,6BACI,4BAAQjB,SAAqB,IAAZgB,EAAkB,kBAAIF,KAAQ,kBAAIG,MAAnD,cACA,4BAAQjB,QAAS,WAAKe,MAAtB,WC+HOG,E,kDA5Hb,aAAc,IAAD,8BACX,gBAWFC,iBAAmB,WACjB,EAAKC,SAAS,CACZC,SAAU,EAAKC,MAAMD,SAAU,KAdtB,EAkBbE,iBAAmB,WACd,EAAKD,MAAMD,SAAS,GACrB,EAAKD,SAAS,CACZC,SAAU,EAAKC,MAAMD,SAAU,KArBxB,EA0BbG,mBAAqB,WACjB,EAAKJ,SAAS,CACZK,WAAY,EAAKH,MAAMG,WAAY,EACnCjB,IAAK,EAAKc,MAAMd,IAAK,KA7Bd,EAgCbkB,mBAAqB,WAChB,EAAKJ,MAAMG,WAAW,GACvB,EAAKL,SAAS,CACZK,WAAY,EAAKH,MAAMG,WAAY,EACnCjB,IAAK,EAAKc,MAAMd,IAAM,KApCf,EAyCbM,MAAQ,WACN,EAAKM,SAAS,CAACJ,WAAW,IAC1B,EAAKW,WAAaC,aAAY,kBAAI,EAAKC,cAAa,KACpDC,QAAQC,IAAI,YA5CD,EA+CbF,UAAU,WAAK,IAAD,EACO,EAAKP,MAAjBZ,EADK,EACLA,IAAKF,EADA,EACAA,IACTE,EAAI,IACM,KAANA,GACD,EAAKU,SAAS,CAACY,YAAW,IAE5B,EAAKZ,SAAS,CAACV,IAAK,EAAKY,MAAMZ,IAAM,KAEhC,IAANA,IACU,IAANF,GACD,EAAKY,SAAS,CACZZ,IAAK,EAAKc,MAAMD,SAChBX,IAAK,EACLuB,cAAe,EAAKX,MAAMW,aAC1BD,YAAY,IAGdF,QAAQC,IAAI,EAAKT,MAAMW,aAAc,EAAKX,MAAMU,aAE9C,EAAKZ,SAAS,CACZV,IAAK,GACLF,IAAK,EAAKc,MAAMd,IAAI,MApEnB,EA2EbS,KAAO,WACL,EAAKG,SAAS,CAACJ,WAAW,IAC1BkB,cAAc,EAAKP,YACnBG,QAAQC,IAAI,SA9ED,EAiFbhB,MAAQ,WACL,EAAKK,SAAS,CACbJ,WAAW,EACXR,IAAK,EAAKc,MAAMG,WAChBf,IAAK,IAEPwB,cAAc,EAAKP,aArFnB,EAAKL,MAAM,CACTD,SAAU,EACVI,WAAY,EACZT,WAAW,EACXR,IAAK,EACLE,IAAK,EACLuB,cAAc,EACdD,YAAY,GATH,E,qDA2FJ,IAAD,EACwEG,KAAKb,MAA5ED,EADD,EACCA,SAAUI,EADX,EACWA,WAAYT,EADvB,EACuBA,UAAWR,EADlC,EACkCA,IAAKE,EADvC,EACuCA,IAAKuB,EAD5C,EAC4CA,aAAcD,EAD1D,EAC0DA,WAChE,OACE,yBAAKlC,UAAU,OACb,8CACA,kBAAC,EAAD,CACEI,UAAWmB,EACXhB,YAAaoB,EACbxB,cAAekC,KAAKhB,iBACpBhB,cAAegC,KAAKZ,iBACpBnB,gBAAiB+B,KAAKX,mBACtBlB,gBAAiB6B,KAAKT,qBAExB,kBAAC,EAAD,CACEjB,QAASD,EACTG,QAASD,EACTM,UAAWA,EACXJ,WAAYqB,IAEd,kBAAC,EAAD,CACEnB,MAAOqB,KAAKrB,MACZC,MAAOoB,KAAKpB,MACZC,UAAWmB,KAAKb,MAAMN,UACtBC,KAAMkB,KAAKlB,QAGI,IAAbe,EAAoB,6BAAK,2BAAOI,IAAKC,IAAOC,UAAQ,KAAW,U,GAtHzDC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.07e62a77.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Little-Girl-Laughing-A1.d2d9d8e7.mp3\";","import React from 'react';\r\nimport './settingContainer.css';\r\n\r\nconst SettingContainer =({...props})=>{\r\n    return (\r\n      <div className=\"settingContainer\">\r\n        <div className='break'>\r\n          <div className=\"label\" id='break-label'>Break Length</div>\r\n          <div>\r\n              {/* increse */}\r\n            <button className='btnSet' id=\"break-increment\" onClick={()=>{props.BreakIncrease()}}>&#8593;</button> \r\n            <span id=\"break-length\">{props.breakTime}</span>\r\n              {/* decrese */}\r\n            <button className='btnSet' id=\"break-decrement\" onClick={()=>{props.BreakDecrease()}}>&#8595;</button>\r\n          </div>\r\n        </div>\r\n        <div className='session'>\r\n          <div className=\"label\" id='session-label'>Session Length</div>\r\n          <div>\r\n            <button className='btnSet' id=\"session-increment\" onClick={()=>{props.SessionIncrease()}}>&#8593;</button>\r\n            <span id=\"session-length\">{props.sessionTime}</span>\r\n            <button className='btnSet' id=\"session-decrement\" onClick={()=>{props.SessionDecrease()}}>&#8595;</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      )\r\n\r\n}\r\n\r\nexport default SettingContainer;","import React from 'react';\r\n\r\nconst Timer = ({...props})=>{\r\n    const min = props.minLeft;\r\n    const sec = props.secLeft;\r\n    const timerLabel = props.timerLabel\r\n    return(\r\n        <div>\r\n            <div id='timer-label'>{timerLabel?'session':'break'}</div>\r\n            <div id='time-left'>\r\n                {min>=10 ? min : `0${min}`}\r\n                <span>:</span>\r\n                {sec>=10? sec : `0${sec}`}\r\n            </div>\r\n        </div>\r\n    )}\r\n\r\nexport default Timer;","import React from 'react';\r\n\r\nconst TimerController = ({start, reset, isRunning, stop})=>(\r\n    <div>\r\n        <button onClick={isRunning===false?()=>start():()=>stop()}>start-stop</button>\r\n        <button onClick={()=>{reset()}}>reset</button>\r\n    </div>\r\n)\r\n\r\nexport default TimerController","import React from 'react';\nimport './App.css';\nimport sound from './Little-Girl-Laughing-A1.mp3';\nimport SettingContainer from './components/settingContainer/settingContainer.jsx';\nimport Timer from './components/Timer/Timer.jsx';\nimport TimerController from './components/TimerController/TimerController.jsx'\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state={\n      setBreak: 1,\n      setSession: 1,\n      isRunning: false,\n      min: 1,\n      sec: 0,\n      timerSession: true,\n      timerBreak: false\n    }\n  }\n  IncreaseSetBreak = () => {\n    this.setState({\n      setBreak: this.state.setBreak +1,\n    });\n\n  }\n  DecreaseSetBreak = () => {\n    if(this.state.setBreak>1){\n      this.setState({\n        setBreak: this.state.setBreak -1\n      })\n    }\n\n  }\n  IncreaseSetSession = () => {\n      this.setState({\n        setSession: this.state.setSession +1,\n        min: this.state.min +1\n      });\n  }\n  DecreaseSetSession = () => {\n    if(this.state.setSession>1){\n      this.setState({\n        setSession: this.state.setSession -1,\n        min: this.state.min - 1\n      })\n    }\n  }\n  \n  start = ()=>{\n    this.setState({isRunning: true});\n    this.startTimer = setInterval(()=>this.tickTimer(), 1000);\n    console.log('running');\n  }\n\n  tickTimer=()=>{\n    const {sec, min} = this.state;\n    if(sec>0){\n        if(sec===10){\n          this.setState({timerBreak:false})\n        }\n        this.setState({sec: this.state.sec - 1});\n    }\n    if(sec===0){\n        if(min===0){\n          this.setState({\n            min: this.state.setBreak, \n            sec: 0,\n            timerSession: !this.state.timerSession,\n            timerBreak: true\n          });\n          \n          console.log(this.state.timerSession, this.state.timerBreak)\n        } else {\n            this.setState({\n              sec: 59, \n              min: this.state.min-1,\n              \n            })\n        }\n    }  \n  }\n\n  stop = () =>{\n    this.setState({isRunning: false});\n    clearInterval(this.startTimer);\n    console.log('stop');\n  }\n\n  reset = () => {\n     this.setState({\n      isRunning: false, \n      min: this.state.setSession, \n      sec: 0\n    });\n    clearInterval(this.startTimer)\n\n  }\n\n  render(){\n    const {setBreak, setSession, isRunning, min, sec, timerSession, timerBreak} = this.state;\n    return (\n      <div className=\"App\">\n        <h1>Pomodoro Clock</h1>\n        <SettingContainer \n          breakTime={setBreak} \n          sessionTime={setSession}\n          BreakIncrease={this.IncreaseSetBreak}\n          BreakDecrease={this.DecreaseSetBreak}\n          SessionIncrease={this.IncreaseSetSession}\n          SessionDecrease={this.DecreaseSetSession} \n        />\n        <Timer \n          minLeft={min} \n          secLeft={sec} \n          isRunning={isRunning}\n          timerLabel={timerSession}\n        />\n        <TimerController \n          start={this.start } \n          reset={this.reset} \n          isRunning={this.state.isRunning} \n          stop={this.stop}\n        />\n        {ã€€\n          ( timerBreak===true)? <div><audio src={sound} autoPlay/></div> : null\n        }\n      </div>\n    );    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}